#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>

#define BITS_LEN 50
int zeros[BITS_LEN] = { 0 };
int ones[BITS_LEN] = { 0 };
int bits = 0;

#define LINES_LEN 10000
int lines[LINES_LEN] = { 0 };
int lines_num = 0;


int parseLine(char *line, size_t linelen)
{
    char ch;
    int bit = 0;
    uint32_t line_val = 0;

    ch = *line++;
    while (ch != '\0')
    {
        if (ch == '0')
        {
            zeros[bit]++;
        }
        else if (ch == '1')
        {
            ones[bit]++;
        }
        else
        {
            //fprintf(stderr, "unknown char: %c\n", ch);
            ch = *line++;
            continue;
        }

        ch = *line++;
        bit++;
        if (bit >= BITS_LEN)
        {
            fprintf(stderr, "BIT_LEN too small\n");
            return -1;
        }

        if (bit > bits)
            bits = bit;
    }

    lines[lines_num] = 0;
    lines_num++;

    if (lines_num >= LINES_LEN)
    {
        fprintf(stderr, "LINES_LEN too small\n");
        return -1;
    }

    return 0;
}



int parse(FILE *fp)
{
    char *line = NULL;
    size_t linelen = 0;
    ssize_t read;

    while ((read = getline(&line, &linelen, fp)) != -1)
    {
        if (line[read] == '\r')
        {
            line[read] = '\0';
            read--;
        }
        parseLine(line, read);
    }

    int i;
    int gamma = 0;
    int epsilon = 0;
    for (i = 0; i < bits; i++)
    {
        if (ones[i] > zeros[i])
        {
            gamma |= 1 << (bits-i-1);
        }
        else
        {
            epsilon |= 1 << (bits-i-1);
        }
    }

    fprintf(stdout, "gamma: %d, epsilon: %d\n", gamma, epsilon);
    fprintf(stdout, "mul: %d\n", gamma * epsilon);

    if (line != NULL)
        free(line);
    return 0;
}


int main(int argc, char *argv[])
{
    const char *f_inp;
    FILE *fp = NULL;

    if (argc >= 2)
    {
        f_inp = argv[1];
    }
    else
    {
        fprintf(stderr, "Provide input file.\n");
        return 1;
    }

    fp = fopen(f_inp, "r");
    if (fp == NULL)
    {
        fprintf(stderr, "Could not open file.\n");
        return 1;
    }

    parse(fp);
    fclose(fp);

    return 0;
}
